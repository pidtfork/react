# .env
# 默认情况下只有 VITE_ 前缀的变量会被暴露给客户端
VITE_API_BASE_URL=/
VITE_APP_TITLE=My React App

# 这个变量不会暴露给客户端代码, ，但在 vite.config.js 中可能有用
SECRET_KEY=123456

# Vite 提供的默认环境变量
# import.meta.env.MODE          // 应用运行的模式（development/production）
# import.meta.env.BASE_URL      // 部署时的基础 URL
# import.meta.env.PROD          // 是否是生产环境
# import.meta.env.DEV           // 是否是开发环境
# import.meta.env.SSR          // 是否是服务器端渲染

# 在你的 React/Vue/Svelte 等组件代码中，你可以通过 import.meta.env 对象来访问这些环境变量。
# 访问 VITE_APP_NAME 环境变量
# const appName = import.meta.env.VITE_APP_NAME;
# const isDevelopment = import.meta.env.DEV;

# 在 vite.config.js 中使用环境变量
# 在 vite.config.js，可以访问 .env 文件中的所有环境变量（包括不以 VITE_ 开头的）。
# 这是因为 vite.config.js 是在 Node.js 环境中运行的。
# Vite 会自动加载 .env 文件到 process.env。
# import { defineConfig, loadEnv } from 'vite';
# const env = loadEnv(mode, process.cwd(), ''); 
# `mode` 参数是当前运行模式 (development, production, 或通过 --mode 指定的自定义模式)
# '' 表示加载所有以空字符串开头的变量 (即所有变量)
# target: env.VITE_API_URL, // 从 .env 文件中获取 API URL

# .env: 默认环境变量文件，会被所有环境加载。
# .env.local: 本地开发环境变量，会被所有环境加载，但会被 .env 文件中的同名变量覆盖。该文件不应该被提交到版本控制（加入到 .gitignore）。
# .env.[mode]: 特定模式（mode）的环境变量文件。例如：
# .env.development: 仅在 development 模式下加载（默认开发模式）。
# .env.production: 仅在 production 模式下加载（默认生产模式）。
# .env.test: 仅在 test 模式下加载（例如用于测试环境）。
# .env.[mode].local: 特定模式下的本地环境变量，会覆盖 env.[mode] 和 .env 中的同名变量。同样不应该被提交到版本控制。
# 加载优先级（从高到低）：
# .env.[mode].local > .env.[mode] > .env.local > .env



# .env.development (仅开发环境)
# pnpm dev 或 pnpm dev --mode development
# 这会加载 .env 和 .env.development (以及 .local 变体)。
# VITE_API_BASE_URL=http://localhost:3000/api
# VITE_APP_TITLE=Dev App


# .env.production (仅生产环境)
# pnpm build 或 pnpm build --mode production
# 这会加载 .env 和 .env.production (以及 .local 变体)。
# VITE_API_BASE_URL=https://api.production.com
# VITE_APP_TITLE=Production App

# .env.local (本地开发，不提交到 Git)
# VITE_DEBUG_MODE=true

# .env.staging 自定义模式 
# pnpm build --mode staging
# 这会加载 .env 和 .env.staging (以及 .local 变体)。
# VITE_API_BASE_URL=https://api.staging.com
# VITE_APP_TITLE=Staging App