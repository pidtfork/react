# OpenAPI 编写规范

## 1. 基本原则

## 要求

- 使用OpenAPI 3.0.3版本编写
- 输出格式为YAML
- 添加servers字段，指定服务地址为`http://localhost:8080`

### 模块化设计

- **单一职责**：每个OpenAPI文件代表一个功能模块或业务域
- **路由前缀**：所有路径以 `/` 为根起始，前后端统一加上相同的路由前缀
- **独立性**：每个文件内的定义保持独立完整

### RESTful 设计

- **资源导向**：使用名词复数形式，如 `/users`、`/orders`、`/products`
- **HTTP方法语义**：GET获取、POST创建、PUT更新、PATCH部分更新、DELETE删除
- **状态码**：仅使用200（成功）和default（错误）

## 2. 路径设计规范

### 路径命名规则

- **字符限制**：使用小写字母、数字，路径分隔符使用连字符(`-`)
- **资源命名**：使用名词复数形式
- **嵌套层级**：建议不超过3级深度
- **动作表达**：通过HTTP方法表达动作，路径中避免动词

### 路径示例

```
✅ 正确示例
/users                    # 用户列表
/users/{id}              # 特定用户
/users/{id}/orders       # 用户的订单
/api-tokens              # API令牌（使用连字符）

❌ 错误示例
/getUsers                # 路径中包含动词
/Users                   # 使用大写字母
/users_list              # 使用下划线
/user                    # 使用单数形式
```

### 路径参数命名一致性

- **参数命名统一**：同一资源类型在不同路径中使用相同的参数名称，如 `/resources/{resourceId}` 中的所有子路由都应使用 `resourceId`
- **避免混淆**：禁止在同一资源基础路径下使用不同参数名称，如 `/scenes/{id}` 和 `/scenes/{sceneId}` 不能同时存在
- **语义明确**：参数名称应包含资源类型，如使用 `userId` 而非 `id`

## 3. operationId 规范

### 命名原则

- **简洁直观**：使用动词+名词形式，最多2个单词组合，如 `listUsers`、`createUser`
- **文件内唯一**：只需保证单文件内唯一即可
- **语义明确**：见名知意，避免缩写和歧义
- **驼峰命名**：使用camelCase格式

## 4. 必需属性规范

每个API操作必须包含以下属性：

- **operationId**：操作唯一标识符
- **summary**：简短中文描述（建议12字以内）
- **tags**：分组标签，仅允许使用中文

## 5. Tags 分组规范

### 命名要求

- **仅使用中文**：所有tags名称必须使用中文
- **简洁明确**：2-6个汉字，清晰表达功能模块
- **避免重复**：同一文件内tags保持唯一

## 6. Schema 定义规范

### 定义原则

- **语义化命名**：使用清晰简洁的业务名词，如 `Scene`、`App`
- **适度复用**：常用结构可定义在components中复用
- **灵活使用**：可根据实际情况选择内联或引用
- **类型完整**：明确定义所有字段的类型和约束
- **避免冗长**：最多2个单词组合，避免 `CreateSceneRequest` 等冗长命名

